import PID_lib

class PIDControl:
    """
    A class to run the PID control for the quadcopter. This class houses all the controllers for stabilizing flight and
    manages them by updating their control loop. This task has specific timing requirements
    """
    def __init__(self, gain_dict):
        """
        Constructor for the PID control class.
        :param gain_dict: A dictionary containing the key values "roll","pitch","yaw", and "thrust"
                            which have sub-dictionaries containing keys "P","I", "D", "windup_guard", and
                            "sample_time" which contain the gain values.
                            Using the **gain_dict["roll"] as the argument to a PID constructor
                            will shove the P, I, and D values into the constructor appropriately since P, I, and D
                            are the argument names taken by the constructor.
        """
        self.gain_dict = gain_dict
        self.pitch_controller = PID_lib.PID()
        self.pitch_controller.setMemberData(**gain_dict["pitch"])
        # same as: pitch_controller.setMemberData(gain_dict["pitch"]["P"], gain_dict["pitch"][I], gain_dict["pitch"]["D"])
        # instantiate other controllers also

        self.fused_output = [0,0,0,0]

        def run(self, sensor_reading_dict, set_point_dict):
            """
            Function to run the PIDControl task managing all the sub-PID controllers
            :param sensor_reading_dict: a dictionary containing keys pitch, roll, yaw, ect for each sub-controller
                                        with feedback values for each sub-controller
            :param set_point_dict: a dictionary containing keys pitch, roll, yaw, ect for each sub-controller
                                        with set-point values for each sub-controller.
            :return fused_output: A list of fused output of all the sub-controllers
            """
            # update the setpoint of each controller
            self.pitch_controller.SetPoint = sensor_reading_dict("pitch")
            # update the other controllers

            # update the feedback values of each controller
            self.pitch_controller.update(sensor_reading_dict("pitch"))
            # update the other controllers

            # fuse all the outputs of the controllers together and return it in a length 4 list
            fused_output = [-self.pitch_controller.output,-self.pitch_controller.output,
                            self.pitch_controller.output, self.pitch_controller.output]

            return fused_output

        def update_gain_dict(self, gain_dict):
            """
            Function to update the gain dictionary of the class, and the member data of all the sub-controllers.
            The plan is to call this method after obtaining a dictionary generated by a json config file containing
            all of our controller parameters.
            :param gain_dict: A dict containing all sub-controller parameters to update to
            :return: None
            """
            self.gain_dict = gain_dict
            self.pitch_controller.setMemberData(**gain_dict)
            # set the member data of other controllers also